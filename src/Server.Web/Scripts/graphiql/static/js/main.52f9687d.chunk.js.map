{"version":3,"sources":["logo.svg","App.jsx","serviceWorker.js","index.js","../node_modules/graphql-language-service-interface/dist sync /^.*$"],"names":["module","exports","__webpack_require__","p","OtherReactComponent","react_default","a","createElement","Fragment","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSave","graphiql","React","createRef","state","query","variables","response","schema","undefined","operationName","storage","defaultQuery","onEditQuery","onEditVariables","onEditOperationName","getDefaultFieldNames","event","editor","current","getQueryEditor","currentText","getValue","_require","require","parse","prettyText","print","setValue","graphQLParams","fetch","window","location","origin","method","headers","Content-Type","body","JSON","stringify","then","json","dist_default","fetcher","assign","ref","Logo","Toolbar","Button","onClick","handleClickPrettifyButton","label","title","Menu","MenuItem","onSelect","App_OtherReactComponent","someProps","Footer","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","map",".","./","./GraphQLLanguageService","./GraphQLLanguageService.js","./GraphQLLanguageService.js.flow","./autocompleteUtils","./autocompleteUtils.js","./autocompleteUtils.js.flow","./getAutocompleteSuggestions","./getAutocompleteSuggestions.js","./getAutocompleteSuggestions.js.flow","./getDefinition","./getDefinition.js","./getDefinition.js.flow","./getDiagnostics","./getDiagnostics.js","./getDiagnostics.js.flow","./getHoverInformation","./getHoverInformation.js","./getHoverInformation.js.flow","./getOutline","./getOutline.js","./getOutline.js.flow","./index","./index.js","./index.js.flow","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uMCMlCC,wBAAsB,kBAC1BC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,QA0GaC,cArGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA4CRQ,OAAS,aA1CPP,EAAKQ,SAAWC,IAAMC,YAEtBV,EAAKW,MAAQ,CAGXC,MAAO,GACPC,UAAW,GACXC,SAAU,GAKVC,YAAQC,EAIRC,cAAe,KACfC,QAAS,KACTC,aAAc,KAGdC,YAAa,KACbC,gBAAiB,KACjBC,oBAAqB,KAMrBC,qBAAsB,MAhCPvB,yFAqCOwB,GACxB,IAAMC,EAAStB,KAAKK,SAASkB,QAAQC,iBAC/BC,EAAcH,EAAOI,WAFIC,EAGNC,EAAQ,IAAzBC,EAHuBF,EAGvBE,MACFC,GAAaC,EAJYJ,EAGhBI,OACUF,EAAMJ,IAC/BH,EAAOU,SAASF,mCAOVG,GACN,OAAOC,MAAMC,OAAOC,SAASC,OAAS,WAAY,CAChDC,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUV,KACpBW,KAAK,SAAAjC,GAAQ,OAAIA,EAASkC,0CAI7B,OACEtD,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CACEuD,QAAS/C,KAAK+C,4CAMlB,OACExD,EAAAC,EAAAC,cAACqD,EAAAtD,EAADM,OAAAkD,OAAA,CACED,QAAS/C,KAAK+C,QACdE,IAAKjD,KAAKK,UACNL,KAAKQ,OAETjB,EAAAC,EAAAC,cAACqD,EAAAtD,EAAS0D,KAAV,oBAGA3D,EAAAC,EAAAC,cAACqD,EAAAtD,EAAS2D,QAAV,gCAGE5D,EAAAC,EAAAC,cAACqD,EAAAtD,EAAS4D,OAAV,CACEC,QAASrD,KAAKsD,0BACdC,MAAM,WACNC,MAAM,kCANV,uCAUEjE,EAAAC,EAAAC,cAACqD,EAAAtD,EAASiE,KAAV,CAAeF,MAAM,OAAOC,MAAM,QAChCjE,EAAAC,EAAAC,cAACqD,EAAAtD,EAASkE,SAAV,CAAmBH,MAAM,OAAOC,MAAM,OAAOG,SAAU3D,KAAKI,UAG9Db,EAAAC,EAAAC,cAACmE,EAAD,CAAqBC,UAAU,UAGjCtE,EAAAC,EAAAC,cAACqD,EAAAtD,EAASsE,OAAV,+FA7FUxD,IAAMyD,WCCJC,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,mCEnInB,IAAAC,EAAA,CACAC,IAAA,GACAC,KAAA,GACAC,2BAAA,GACAC,8BAAA,GACAC,mCAAA,IACAC,sBAAA,GACAC,yBAAA,GACAC,8BAAA,IACAC,+BAAA,GACAC,kCAAA,GACAC,uCAAA,IACAC,kBAAA,GACAC,qBAAA,GACAC,0BAAA,IACAC,mBAAA,GACAC,sBAAA,GACAC,2BAAA,IACAC,wBAAA,GACAC,2BAAA,GACAC,gCAAA,IACAC,eAAA,GACAC,kBAAA,GACAC,uBAAA,IACAC,UAAA,GACAC,aAAA,GACAC,kBAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAArH,EAAAsH,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAA7B,EAAA4B,GACA,KAAAC,EAAA,IACA,IAAAE,EAAA,IAAAC,MAAA,uBAAAJ,EAAA,KAEA,MADAG,EAAAE,KAAA,mBACAF,EAEA,OAAAF,EAEAF,EAAAO,KAAA,WACA,OAAAjH,OAAAiH,KAAAlC,IAEA2B,EAAAQ,QAAAL,EACAzH,EAAAC,QAAAqH,EACAA,EAAAE,GAAA","file":"static/js/main.52f9687d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import GraphiQL from \"graphiql\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"graphiql/graphiql.css\";\n\nconst OtherReactComponent = () => (\n  <React.Fragment>\n  </React.Fragment>\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.graphiql = React.createRef();\n\n    this.state = {\n      // OPTIONAL PARAMETERS\n      // GraphQL artifacts\n      query: \"\",\n      variables: \"\",\n      response: \"\",\n\n      // GraphQL Schema\n      // If `undefined` is provided, an introspection query is executed\n      // using the fetcher.\n      schema: undefined,\n\n      // Useful to determine which operation to run\n      // when there are multiple of them.\n      operationName: null,\n      storage: null,\n      defaultQuery: null,\n\n      // Custom Event Handlers\n      onEditQuery: null,\n      onEditVariables: null,\n      onEditOperationName: null,\n\n      // GraphiQL automatically fills in leaf nodes when the query\n      // does not provide them. Change this if your GraphQL Definitions\n      // should behave differently than what\"s defined here:\n      // (https://github.com/graphql/graphiql/blob/master/src/utility/fillLeafs.js#L75)\n      getDefaultFieldNames: null\n    };\n  }\n\n  // Example of using the GraphiQL Component API via a toolbar button.\n  handleClickPrettifyButton(event) {\n    const editor = this.graphiql.current.getQueryEditor();\n    const currentText = editor.getValue();\n    const { parse, print } = require(\"graphql\");\n    const prettyText = print(parse(currentText));\n    editor.setValue(prettyText);\n  }\n\n  onSave = () => {\n\n  }\n\n  fetcher(graphQLParams) {\n    return fetch(window.location.origin + '/graphql', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  render() {\n    return (\n      <GraphiQL\n        fetcher={this.fetcher}\n      />\n    );\n  }\n\n  render2() {\n    return (\n      <GraphiQL\n        fetcher={this.fetcher}\n        ref={this.graphiql}\n        {...this.state}\n      >\n        <GraphiQL.Logo>\n          Custom Logo\n        </GraphiQL.Logo>\n        <GraphiQL.Toolbar>\n\n          // GraphiQL.Button usage\n          <GraphiQL.Button\n            onClick={this.handleClickPrettifyButton}\n            label=\"Prettify\"\n            title=\"Prettify Query (Shift-Ctrl-P)\"\n          />\n\n          // Some other possible toolbar items\n          <GraphiQL.Menu label=\"File\" title=\"File\">\n            <GraphiQL.MenuItem label=\"Save\" title=\"Save\" onSelect={this.onSave} />\n          </GraphiQL.Menu>\n\n          <OtherReactComponent someProps=\"true\" />\n\n        </GraphiQL.Toolbar>\n        <GraphiQL.Footer>\n        // Footer works the same as Toolbar\n        // add items by appending child components\n        </GraphiQL.Footer>\n      </GraphiQL>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\".\": 30,\n\t\"./\": 30,\n\t\"./GraphQLLanguageService\": 59,\n\t\"./GraphQLLanguageService.js\": 59,\n\t\"./GraphQLLanguageService.js.flow\": 178,\n\t\"./autocompleteUtils\": 40,\n\t\"./autocompleteUtils.js\": 40,\n\t\"./autocompleteUtils.js.flow\": 179,\n\t\"./getAutocompleteSuggestions\": 33,\n\t\"./getAutocompleteSuggestions.js\": 33,\n\t\"./getAutocompleteSuggestions.js.flow\": 180,\n\t\"./getDefinition\": 41,\n\t\"./getDefinition.js\": 41,\n\t\"./getDefinition.js.flow\": 181,\n\t\"./getDiagnostics\": 43,\n\t\"./getDiagnostics.js\": 43,\n\t\"./getDiagnostics.js.flow\": 182,\n\t\"./getHoverInformation\": 44,\n\t\"./getHoverInformation.js\": 44,\n\t\"./getHoverInformation.js.flow\": 183,\n\t\"./getOutline\": 58,\n\t\"./getOutline.js\": 58,\n\t\"./getOutline.js.flow\": 184,\n\t\"./index\": 30,\n\t\"./index.js\": 30,\n\t\"./index.js.flow\": 185\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 83;"],"sourceRoot":""}